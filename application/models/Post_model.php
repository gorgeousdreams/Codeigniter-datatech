<?php
/* 
 * Generated by CRUDigniter v1.0 Beta
 * www.crudigniter.com
 */

class post_model extends CI_Model
{
	function __construct()
	{
		parent::__construct();
		$this->load->helper('image');
	}

	function add_post($data)
	{
		$array["title"] = $data["title"];
		$array["url"] = $data["url"];
		$array["type"] = $data["type"];
		$array["created_on"] = $data["created_on"];
		$array["raw_content"] = str_replace('class="my-math"', 'class="my-math" lang="latex"',$data["content"]);
		$array["content"] = strip_tags(trim($data["content"]));
		$array["category_id"] = $data["category_id"];
		$array["created_by"] = $data["created_by"];

		$insert_partial_data = $this->db->insert("posts", $array);

		$post_id = $this->db->insert_id();

		if(!empty($data['image']) && $data['image']['name'] != "")
		{
			$image = $data['image'];
			$path = FCPATH."uploads/post/".$post_id."/";

			if(!is_dir($path))
			{
				$old = umask(0); 
				mkdir($path,0777,true); 
				umask($old); 
				$image['name'] = str_replace(" ","-",$image['name']);
				$offset = strpos($image['name'], '.');
				$image['name_for_listing'] = substr_replace($image['name'], HEIGHT_FOR_POST_LISTING."_".WIDTH_FOR_POST_LISTING, $offset).".jpg";
				$image['name_for_detail_listing']= substr_replace($image['name'],HEIGHT_FOR_POST_DETAILS."_".WIDTH_FOR_POST_DETAILS, $offset).".jpg";
				$upload = move_uploaded_file($image['tmp_name'],$path.$image['name']);

				if($upload)
				{
					make_thumb($path.$image['name_for_listing'],$path.$image['name'],HEIGHT_FOR_POST_LISTING, WIDTH_FOR_POST_LISTING);
					make_thumb($path.$image['name_for_detail_listing'],$path.$image['name'],HEIGHT_FOR_POST_DETAILS, WIDTH_FOR_POST_DETAILS);
					$this->db->where("id",$post_id);
					$this->db->update("posts",array("img"=>$image['name']));
				}
			}
		}

		if(!empty($data['tag']))
		{
			$tags = $data['tag'];
			$i = 0;

			foreach($tags as  $tag)
			{
				$is_tag_exist = $this->db->get_where("tags", array("tag"=>$tag))->row_array();

				if(!empty($is_tag_exist))
				{
					$post_tags[$i]["tag_id"] = $is_tag_exist['id'];
					$post_tags[$i]["post_id"] = $post_id;
				}
				else
				{
					$tag_id = $this->create_tag($tag);
					$post_tags[$i]['tag_id'] = $tag_id;
					$post_tags[$i]["post_id"] = $post_id;
				}
				$i++;
			}

			if(!empty($post_tags))
			{
				$this->db->insert_batch("post_belongs_to_tags",$post_tags);
			}
		}

		if(!empty($data['topic']))
		{
			$j = 0;
			foreach ($data['topic'] as $topic) {

				$topic_data = $this->db->get_where("topics",array("topic" => $topic))->row_array();
				
				if(!empty($topic_data))
				{
					$topic_array[$j]["topic_id"] = $topic_data["id"];
					$topic_array[$j]["post_id"] = $post_id;

				}
				else
				{
					$topic_id = $this->create_topic($topic);

					$this->db->insert("topics_belongs_to_category", array("topic_id" => $topic_id, "category_id" => $data["category_id"]));

					$topic_array[$j]["topic_id"] = $topic_id;
					$topic_array[$j]["post_id"] = $post_id;
				}

				$j++;
			}

			if(!empty($topic_array))
			{
				$this->db->insert_batch("post_belongs_to_topics",$topic_array);
			}
		}

		if($insert_partial_data)
		{
			$response["rc"] = TRUE;
			$response["msg"] = "Post added successfully";
		}
		else
		{
			$response["rc"] = FALSE;
			$response["msg"] = "Error while adding post";
		}

		return $response;
	}

	function get_featured_posts($param = "")
	{
		if(is_array($param))
		{
			$condition = '1=1';
			$order_by_condition_for_posts = 'ORDER BY post_crd DESC';
			
			$limit = '';
			if(isset($param['limit']) && $param['limit'] != '' )
				$limit = ' limit '.$param['limit'];
			
				$sql = 'SELECT posts.*,  user_details.*, usr_id, usr_stat_fk 
						FROM posts 
						JOIN users ON usr_id = post_usr_fk 
						JOIN user_details ON usrd_usr_fk = usr_id
						WHERE '.$condition.'
						AND post_devoted <= 20
						ORDER BY post_crd DESC '.$limit;
				
				$posts =  $this->db->query($sql)->result_array();
		}

		if(!empty($posts))
		{
			$response["data"] = $posts;
			$response["rc"] = TRUE;
		}
		else
		{

			$response["rc"] = FALSE;
			$response["msg"] = "No post Found";
		}
		return $response;
	}
	
	function get_user_posts($param = "0")
	{
		$query = 'SELECT post_id, post_title, post_url, post_content, post_crd
				FROM posts
				WHERE post_usr_fk = '.$param.'
				ORDER BY post_crd desc limit 3';
		
		$posts =  $this->db->query($query)->result_array();
		if(!empty($posts))
		{
			$response["data"] = $posts;
			$response["rc"] = TRUE;
		}
		else
		{
		
			$response["rc"] = FALSE;
			$response["msg"] = "No post Found";
		}
		return $response;
	}
	
	function get_all_posts($param = "")
	{
		// if parameter is an array
		if(is_array($param))
		{
			$condition = "1=1";
			
			$query = 'SELECT posts.*, user_details.*, usr_id, usr_stat_fk,  
				(SELECT count(phv_post_fk) FROM post_has_views WHERE phv_post_fk = post_id) as views, 
				(SELECT count(phs_post_fk) FROM post_has_shares WHERE phs_post_fk = post_id) as shares,
				(SELECT count(phc_post_fk) FROM post_has_comments WHERE phc_post_fk = post_id) as comments
				FROM posts
				JOIN users ON usr_id = post_usr_fk 
				JOIN user_details ON usrd_usr_fk = usr_id
				WHERE '.$condition;
			
			$posts = $this->db->query($query)->result_array();
		}
		// if parameter is a record id
		else if($param != 0)
		{
		
			
			/* $this->db->where("id",$param);
			$topic_id = $this->db->get("topics")->row_array();
		
			$query = "
						SELECT
							posts.*
						FROM
							posts,post_belongs_to_topics pbt
						WHERE
							posts.devoted <=20 AND
							posts.id = pbt.post_id AND
							pbt.topic_id = '".$topic_id["id"]."'
			";
			$posts = $this->db->query($query)->result_array(); */
		
		}
		// filter by user interest
		else {
			$query = 'SELECT posts.*, user_details.*, usr_id, usr_stat_fk,
				(SELECT count(phv_post_fk) FROM post_has_views WHERE phv_post_fk = post_id) as views,
				(SELECT count(phs_post_fk) FROM post_has_shares WHERE phs_post_fk = post_id) as shares,
				(SELECT count(phc_post_fk) FROM post_has_comments WHERE phc_post_fk = post_id) as comments
				FROM posts
				JOIN users ON usr_id = post_usr_fk 
				JOIN user_details ON usrd_usr_fk = usr_id
				ORDER BY post_lmd DESC';
				
			$posts = $this->db->query($query)->result_array();
		}
		
		if(!empty($posts))
		{
			$response["data"] = $posts;
			$response["rc"] = TRUE;
		}
		else
		{
		
			$response["rc"] = FALSE;
			$response["msg"] = "No post Found";
		}
		return $response;
	}
	
	function get_all_posts1($param = "")
	{
		if(is_array($param))
		{
			$condition = "1=1";

			if(isset($param["category"]) && $param["category"] != "" )
			{
				$condition .= " AND p.category_id = ".$param["category"];
			}

			if(isset($param["topic"]) && !empty($param["topic"]) )
			{
				$last_key = key( array_slice( $param["topic"], -1, 1, TRUE ) );

				$topics = "";

				foreach($param["topic"] as $key => $topic)
				{
					if($topic != "")
					{
						if( $key == $last_key)
						{
							$topics .= "$topic"; 
						}
						else
						{
							$topics .= "$topic, "; 
						}
					}
				}

				if( $topics == "" )
				{
					$condition .= " AND ( p.id = pbt.post_id AND pbt.topic_id in(0)) ";
				}
				else
				{
					$condition .= " AND ( p.id = pbt.post_id AND pbt.topic_id in(".$topics.") ) ";
				}
			}

			if(isset($param["tag"]) && is_array($param) &&!empty($param["tag"]) )
			{
				$tag_last_key = key( array_slice( $param["tag"], -1, 1, TRUE ) );

				$tags = "";

				foreach($param["tag"] as $key => $tag)
				{
					$tag = $this->db->get_where("tags", array("tag" => $tag))->row_array();
					
					if(isset($tag['id']) && $tag['id'] != "")
					{
						if( $key == $tag_last_key)
						{
							$tags .= $tag['id']; 
						}
						else
						{
							$tags .= $tag['id'].", "; 
						}
					}
				}
				
				if( $tags == "" )
				{
					$condition .= " AND ( p.id = pbtt.post_id AND pbtt.tag_id in(0) ) ";
				}
				else
				{
					$condition .= " AND ( p.id = pbtt.post_id AND pbtt.tag_id in(".$tags.") ) ";
				}
				
			}

			if(isset($param["extra_param"]) && $param["extra_param"] != "" )
			{
				$condition .= " AND (p.title LIKE '%".$this->db->escape_like_str($param['extra_param'])."%' OR p.content LIKE '%".$this->db->escape_like_str($param['extra_param'])."%') ";
			}
			//order by interests and topic names
			//$user_id_condition = "";
			$user_id_condition = "";
			if($this->session->userdata('user_id'))
			{
				$user_id =  $this->session->userdata('user_id'); 
				$user_id_condition =  ' uhi.user_id = '.$user_id;
				$sql = "SELECT 
							t.topic,
							t.id as user_interested_topic_id
					FROM
							topics t
					RIGHT JOIN
							user_has_interests uhi
					ON
							t.id = uhi.topic_id
					
					WHERE
							".$user_id_condition."
					ORDER BY t.topic ASC
				";
				
				$order_topic_ids = $this->db->query($sql)->result_array();
				
				if(!empty($order_topic_ids))
				{
					$topic_ids_as_per_uhi = array();
					foreach ($order_topic_ids as $key => $value) {
						array_push($topic_ids_as_per_uhi, $value['user_interested_topic_id']);
					}
					$topic_ids_as_per_uhi_string = implode(",", $topic_ids_as_per_uhi);

					$order_by_condition_for_posts = 'ORDER BY  post_crd DESC';//, FIELD(t.id, '.$topic_ids_as_per_uhi_string.') DESC';
				}
				else
					$order_by_condition_for_posts = 'ORDER BY ppost_crd DESC';
			}
			else
				$order_by_condition_for_posts = 'ORDER BY post_crd DESC';
			
			
			$limit = "";
			if(isset($param["limit"]) && $param["limit"] != "" )
				$limit = " limit ".$param["limit"];
			
			
				$sql2 = "SELECT 
							*
					FROM
							posts
					WHERE
							".$condition."
					AND 
							post_devoted <= 20
					GROUP BY post_id
					".$order_by_condition_for_posts.$limit
				;
				
				echo $sql2;
				
				$posts =  $this->db->query($sql2)->result_array();
				//pr($posts); exit;
			// $query = " 	SELECT 
			// 				p.*
			// 			FROM
			// 				posts p, categories c, topics t, post_belongs_to_topics pbt, post_belongs_to_tags pbtt
			// 			WHERE
			// 				".$condition."
			// 			GROUP BY p.id
			// ";
			// //echo $query; exit;
			// $posts = $this->db->query($query)->result_array();


		}

		else if($param != 0)
		{

			$this->db->where("id",$param);
			$topic_id = $this->db->get("topics")->row_array();

			$query = "
						SELECT 
							posts.*
						FROM
							posts,post_belongs_to_topics pbt
						WHERE 
							posts.devoted <=20 AND
							posts.id = pbt.post_id AND
							pbt.topic_id = '".$topic_id["id"]."'
			";
			$posts = $this->db->query($query)->result_array();

		}
		else
		{
			$user_id_condition = "";
			if($this->session->userdata('user_id'))
			{
				$user_id =  $this->session->userdata('user_id'); 
				$user_id_condition =  ' uhi.user_id = '.$user_id;
				$sql = "SELECT 
							t.topic,
							t.id as user_interested_topic_id
					FROM
							topics t
					RIGHT JOIN
							user_has_interests uhi
					ON
							t.id = uhi.topic_id
					
					WHERE
							".$user_id_condition."
					ORDER BY t.topic ASC
				";
				
				$order_topic_ids = $this->db->query($sql)->result_array();
				
				if(!empty($order_topic_ids))
				{
					$topic_ids_as_per_uhi = array();
					foreach ($order_topic_ids as $key => $value) {
						array_push($topic_ids_as_per_uhi, $value['user_interested_topic_id']);
					}
					$topic_ids_as_per_uhi_string = implode(",", $topic_ids_as_per_uhi);

					$order_by_condition_for_posts = 'ORDER BY  p.created_on DESC, FIELD(t.id, '.$topic_ids_as_per_uhi_string.') DESC';
				}
				else
					$order_by_condition_for_posts = 'ORDER BY p.created_on DESC, (CASE WHEN t.id IS NULL then 1 ELSE 0 END),t.topic';
			}
			else
				$order_by_condition_for_posts = 'ORDER BY p.created_on DESC, (CASE WHEN t.id IS NULL then 1 ELSE 0 END),t.topic';
			
			
				
				$sql2 = "SELECT 
						        p.*,
						        pbt.topic_id,
						        t.id as atopicid,
						        t.topic
						FROM
						        posts p
						LEFT JOIN
						        post_belongs_to_topics pbt
						ON
						        p.id = pbt.post_id
						LEFT JOIN
						        topics t
						ON
						        pbt.topic_id = t.id
						WHERE 
								p.devoted <= 20
						GROUP BY p.id
					".$order_by_condition_for_posts
				;
				$posts =  $this->db->query($sql2)->result_array();
		}
		foreach ($posts as $key => $value) {

			$tags_query = "
							SELECT 
								tags.*
							FROM 
								tags,
								post_belongs_to_tags pbt
							WHERE 
								pbt.post_id = '".$value['id']."'
							GROUP BY 
								tags.id
			";
			$tags = $this->db->query($tags_query)->result_array();

			$post_tags = "";
			$tag_count = count($tags);

			foreach($tags as $tag_key => $tag)
			{
				if($tag_count != $tag_key+1)
					$post_tags .= ucfirst($tag["tag"]).", ";
				else
					$post_tags .= ucfirst($tag["tag"]);
			}

			$posts[$key]["tags"] = $post_tags;

			$category_query = "
							SELECT 
								c.*
							FROM
								categories c,posts p
							WHERE 
								p.id = '".$value['id']."' AND c.id = p.category_id

			";

			$categories = $this->db->query($category_query)->row_array();

			$posts[$key]["category"] = $categories;

			/* creating links if any url exist in a content */

			$reg_exUrl = "/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/";

			// Check if there is a url in the text
			if(preg_match($reg_exUrl, $value['content'], $url)) {

			       // make the urls hyper links
			       $posts[$key]['content'] = preg_replace($reg_exUrl, "<a href='{$url[0]}'>{$url[0]}</a> ", $value['content']);

			}

			$comments_query = "
						SELECT 
							post_has_comments.*,
							users.name
						FROM
							post_has_comments
						INNER JOIN 
							users
						ON
							users.id = post_has_comments.commented_by
						WHERE
							post_id = '".$value['id']."'
						ORDER BY (post_has_comments.is_answer=1) ASC ,post_has_comments.created_on DESC

		";

		$comments = $this->db->query($comments_query)->result_array();

		$posts[$key]["comments"] = $comments;

		}

		if(!empty($posts))
		{
			$response["data"] = $posts;
			$response["rc"] = TRUE;
		}
		else
		{

			$response["rc"] = FALSE;
			$response["msg"] = "No post Found";
		}
		return $response;
	}

	function get_post_by_category($url)
	{
		$this->db->where("url",$url);
		$category_id = $this->db->get("categories")->row_array();

		$this->db->where("category_id",$category_id['id']);
		$posts = $this->db->get("posts")->result_array();

		foreach ($posts as $key => $value) {

			$tags_query = "
							SELECT 
								tags.*
							FROM 
								tags,
								post_belongs_to_tags pbt
							WHERE 
								pbt.post_id = '".$value['id']."'
							GROUP BY 
								tags.id

			";
			$tags = $this->db->query($tags_query)->result_array();

			$post_tags = "";
			$tag_count = count($tags);

			foreach($tags as $tag_key => $tag)
			{
				if($tag_count != $tag_key+1)
					$post_tags .= ucfirst($tag["tag"]).", ";
				else
					$post_tags .= ucfirst($tag["tag"]);
			}

			$posts[$key]["tags"] = $post_tags;

			$category_query = "
							SELECT 
								c.*
							FROM
								categories c,posts p
							WHERE 
								p.id = '".$value['id']."' AND c.id = p.category_id

			";

			$categories = $this->db->query($category_query)->result_array();

			$posts[$key]["categories"] = $categories;

			/* creating links if any url exist in a content */

			$reg_exUrl = "/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/";

			// Check if there is a url in the text
			if(preg_match($reg_exUrl, $value['content'], $url)) {

			       // make the urls hyper links
			       $posts[$key]['content'] = preg_replace($reg_exUrl, "<a href='{$url[0]}'>{$url[0]}</a> ", $value['content']);

			}
		}

		if(!empty($posts))
		{
			$response["data"] = $posts;
			$response["rc"] = TRUE;
		}
		else
		{

			$response["rc"] = FALSE;
			$response["msg"] = "No post Found.";
		}
		return $response;
	}

	function create_tag($tag)
	{
		$data["tag"] = $tag;
		$data["created_on"] = time();

		$this->db->insert("tags",$data);
		return $this->db->insert_id();
	}

	function get_post_by_url($post_url)
	{

		$posts = $this->db->get_where("posts",array( "url" => $post_url ))->row_array();

		$this->add_view_post_by_id($posts["id"]);

		$tags_query = "
						SELECT 
							tags.*
						FROM 
							tags,
							post_belongs_to_tags pbt
						WHERE 
							pbt.post_id = '".$posts['id']."'	AND
							pbt.tag_id = tags.id

		";

		$tags = $this->db->query($tags_query)->result_array();

		// $post_tags = "";
		// $tag_count = count($tags);

		// foreach($tags as $tag_key => $tag)
		// {
		// 	if($tag_count != $tag_key+1)
		// 		$post_tags .= ucfirst($tag["tag"]).", ";
		// 	else
		// 		$post_tags .= ucfirst($tag["tag"]);
		// }

		$posts["tags"] = $tags;
		
		/* topics belongs to this post */

		$topic_query = "
						SELECT 
							topics.*
						FROM 
							topics,
							post_belongs_to_topics pbt
						WHERE 
							pbt.post_id = '".$posts['id']."' AND
							pbt.topic_id = topics.id

				";
		$topics = $this->db->query($topic_query)->result_array();

		// $post_topics = "";
		// $topic_count = count($topics);

		// foreach($topics as $topic_key => $topic)
		// {
		// 	if($topic_count != $topic_key+1)
		// 		$post_topics .= ucfirst($topic["topic"]).", ";
		// 	else
		// 		$post_topics .= ucfirst($topic["topic"]);
		// }

		$posts["topics"] = $topics;

		$category_query = "
						SELECT 
							c.*
						FROM
							categories c,posts p
						WHERE 
							p.id = '".$posts['id']."' AND c.id = p.category_id

		";

		$categories = $this->db->query($category_query)->row_array();

		$posts["category"] = $categories;

		$comments_query = "
						SELECT 
							post_has_comments.*,
							users.name
						FROM
							post_has_comments
						INNER JOIN 
							users
						ON
							users.id = post_has_comments.commented_by
						WHERE
							post_id = '".$posts['id']."'
						ORDER BY (post_has_comments.is_answer=1) ASC ,post_has_comments.created_on DESC

		";

		$comments = $this->db->query($comments_query)->result_array();

		$posts["comments"] = $comments;
		/* creating links if any url exist in a content */

		$reg_exUrl = "/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/";

		// Check if there is a url in the text
		if(preg_match($reg_exUrl, $posts['content'], $url)) {

		       // make the urls hyper links
		       $posts['content'] = preg_replace($reg_exUrl, "<a href='{$url[0]}'>{$url[0]}</a> ", $posts['content']);

		}

		$this->db->select("count(*) as viewed_count");
		$this->db->where("post_id", $posts['id']);
		$posts["viewed_count"] = $this->db->get("post_has_views")->row_array();

		if(!empty($posts))
		{
			$response["data"] = $posts;
			$response["rc"] = TRUE;
		}
		else
		{

			$response["rc"] = FALSE;
		}
		return $response;

	}

	function add_post_comment($data)
	{
		$comment = $this->db->insert("post_has_comments",$data);	
		$comment_id = $this->db->insert_id();
		return $comment_id;
	}

	function add_vote_to_post_by_id($array)
	{
		$check_vote_status = $this->db->get_where("users_votes",array("post_id" => $array["post_id"], "user_id" => $array["user_id"]))->row_array();

		if(isset($check_vote_status["id"]))
		{
			if(isset($array["vote"]) && $array["vote"] != "" )
			{
				switch ($array["vote"]) {
					
					case 'vote':
					
						if($check_vote_status["stat"] == VOTED )
						{
							return TRUE;
						}
						else if($check_vote_status["stat"] == DEVOTED )
						{
							$voted_query = "UPDATE 
												`posts` 
											SET `voted` = voted+1, `devoted` = devoted-1 WHERE `id` = ".$array['post_id']."
										";

							$this->db->query($voted_query);

							$devoted = $this->db->update("users_votes", array("stat" => VOTED), array("id"=>$check_vote_status["id"]));
							
							if($devoted)
							{
								$response["rc"] = TRUE;
							}

						}

						break;

					case 'devote':

						if($check_vote_status["stat"] == DEVOTED )
						{
							return TRUE;
						}
						else if($check_vote_status["stat"] == VOTED )
						{

							$devoted_query = "UPDATE 
												`posts` 
											SET `devoted` = devoted+1, `voted` = voted-1 WHERE `id` = ".$array['post_id']."
										";

							$this->db->query($devoted_query);

							$voted = $this->db->update("users_votes", array("stat" => DEVOTED), array("id"=>$check_vote_status["id"]));
							
							if($voted)
							{
								$response["rc"] = TRUE;
							}

						}
						break;
					
					default:
						# code...
						break;
				}
			}
		}
		else
		{
			if(isset($array["vote"]) && $array["vote"] != "" )
			{
				switch ($array["vote"]) {
					
					case 'vote':
					

						$voted_query = "UPDATE 
											`posts` 
										SET `voted` = voted+1 WHERE `id` = ".$array['post_id']."
									";

						$voted = $this->db->query($voted_query);

						$data["post_id"] = $array["post_id"];
						$data["user_id"] = $array["user_id"];
						$data["stat"] = VOTED;
						$voted = $this->db->insert("users_votes", $data);
						
						if($voted)
						{
								$response["rc"] = TRUE;
						}

						break;

					case 'devote':

						$devoted_query = "UPDATE 
											`posts` 
										SET `devoted` = devoted+1 WHERE `id` = ".$array['post_id']."
									";

						$devoted = $this->db->query($devoted_query);
						
						$data["post_id"] = $array["post_id"];
						$data["user_id"] = $array["user_id"];
						$data["stat"] = DEVOTED;
						$devoted = $this->db->insert("users_votes", $data);
						
						if($devoted)
						{
								$response["rc"] = TRUE;
						}
						break;
					
					default:
						# code...
						break;
				}
			}
		}

		$data = $this->get_post_by_id($array["post_id"]);
		$response["data"] = $data["data"];
		return $response;
	}

	function create_topic($topic)
	{
		$data["topic"] = $topic;
		$data["created_on"] = time();

		$this->db->insert("topics",$data);
		return $this->db->insert_id();
	}

	function get_all_tags()
	{
		$result = $this->db->get("tags")->result_array();

		if(!empty($result))
		{
			$response['rc']	=	TRUE;
			$response['msg']	=	"All Tags";
			$response['data']	=	$result;
		}
		else
		{
			$response['rc']	=	FALSE;
			$response['msg']	=	"No tags available";
		}

		return $response;
	}

	function get_tags_by_post_id($id)
	{
		$query = "SELECT tag_id FROM post_belongs_to_tags where post_id=".$id."";
		$result = $this->db->query($query)->result_array();
		
		return $result;
	}

	function does_post_belong_to_user($user_id, $post_id)
	{
		$query = "SELECT * FROM posts where id=".$post_id." AND created_by=".$user_id."";
		$result = $this->db->query($query)->row_array();

		if(!empty($result))
		{
			$response['rc']	=	TRUE;
			$response['msg']	=	"valid Post";
			$response['data']	=	$result;
		}
		else
		{
			$response['rc']	=	FALSE;
			$response['msg']	=	"You can edit only those posts that are created by yourself";
		}

		return $response;
	}

	function get_post_by_id($post_id)
	{
		$query = "SELECT * FROM posts where id=".$post_id."";
		$result = $this->db->query($query)->row_array();

		$query1 = "SELECT post_belongs_to_tags.* ,tags.tag as tagname
					FROM post_belongs_to_tags 
					LEFT JOIN tags on post_belongs_to_tags.tag_id = tags.id
					where post_belongs_to_tags.post_id=".$post_id."";
		$result['post_tags'] = $this->db->query($query1)->result_array();

		$query2 = "SELECT post_belongs_to_topics.* ,topics.topic as topicname
					FROM post_belongs_to_topics 
					LEFT JOIN topics on post_belongs_to_topics.topic_id = topics.id
					where post_belongs_to_topics.post_id=".$post_id."";
		$result['post_topics'] = $this->db->query($query2)->result_array();

		if(!empty($result))
		{
			$resopnse['rc'] =True;
			$response['data'] = $result;
		}
		else
		{
			$response['rc']	=	FALSE;
			$response['msg']	=	"No details found for this post";
		}
		return $response;
	}

	function update_posts($id,$data)
	{	
		$array["title"] = $data["title"];
		$array["url"] = $data["url"];
		$array["type"] = $data["type"];
		$array["raw_content"] = str_replace('class="my-math"', 'class="my-math" lang="latex"',$data["content"]);
		$array["content"] = strip_tags(trim($data["content"]));
		$array["category_id"] = $data["category_id"];
		$array["updated_on"] = $data["updated_on"];

		$insert_partial_data = $this->db->update("posts", $array, array('id'=> $id ));

		if(!empty($data['image']) && $data['image']['name'] != "")
		{
			$image = $data['image'];
			$path = FCPATH."uploads/post/".$id."/";

			if(!is_dir($path))
			{
				$images_files = FCPATH.'uploads/post/'.$id;
        		$this->recursiveRemoveDirectory($images_files);
			}
			$old = umask(0); 
			mkdir($path,0777,true); 
			umask($old); 
			$image['name'] = str_replace(" ","-",$image['name']);
			$offset = strpos($image['name'], '.');
			$image['name_for_listing'] = substr_replace($image['name'], HEIGHT_FOR_POST_LISTING."_".WIDTH_FOR_POST_LISTING, $offset).".jpg";
			$image['name_for_detail_listing']= substr_replace($image['name'],HEIGHT_FOR_POST_DETAILS."_".WIDTH_FOR_POST_DETAILS, $offset).".jpg";
			$upload = move_uploaded_file($image['tmp_name'],$path.$image['name']);

			if($upload)
			{	
				make_thumb($path.$image['name_for_listing'],$path.$image['name'],HEIGHT_FOR_POST_LISTING, WIDTH_FOR_POST_LISTING);
				make_thumb($path.$image['name_for_detail_listing'],$path.$image['name'],HEIGHT_FOR_POST_DETAILS, WIDTH_FOR_POST_DETAILS);
				$this->db->where("id",$id);
				$this->db->update("posts",array("img"=>$image['name']));
			}
			
		}

		$this->db->delete('post_belongs_to_tags',array('post_id'=>$id));
		if(!empty($data['tag']))
		{
			$tags = $data['tag'];
			$i = 0;

			foreach($tags as  $tag)
			{
				$is_tag_exist = $this->db->get_where("tags", array("tag"=>$tag))->row_array();

				if(!empty($is_tag_exist))
				{
					$post_tags[$i]["tag_id"] = $is_tag_exist['id'];
					$post_tags[$i]["post_id"] = $id;
				}
				else
				{
					$tag_id = $this->create_tag($tag);
					$post_tags[$i]['tag_id'] = $tag_id;
					$post_tags[$i]["post_id"] = $id;
				}
				$i++;
			}

			if(!empty($post_tags))
			{
				$this->db->insert_batch("post_belongs_to_tags",$post_tags);
			}
		}

		$this->db->delete('post_belongs_to_topics',array('post_id'=>$id));			
		if(!empty($data['topic']))
		{
			$j = 0;
			foreach ($data['topic'] as $topic) {

				$topic_data = $this->db->get_where("topics",array("topic" => $topic))->row_array();
				
				if(!empty($topic_data))
				{
					$topic_array[$j]["topic_id"] = $topic_data["id"];
					$topic_array[$j]["post_id"] = $id;

				}
				else
				{
					$topic_id = $this->create_topic($topic);

					$this->db->insert("topics_belongs_to_category", array("topic_id" => $topic_id, "category_id" => $data["category_id"]));

					$topic_array[$j]["topic_id"] = $topic_id;
					$topic_array[$j]["post_id"] = $id;
				}

				$j++;
			}

			if(!empty($topic_array))
			{
				$this->db->insert_batch("post_belongs_to_topics",$topic_array);
			}
		}

		if($insert_partial_data)
		{
			$response["rc"] = TRUE;
			$response["msg"] = "Post updated successfully";
		}
		else
		{
			$response["rc"] = FALSE;
			$response["msg"] = "Error while updating post";
		}

		return $response;
	}

	function add_post_share($params)
	{
		if($this->db->insert('post_has_shares', $params))
		{
			$response["rc"] = TRUE;
			$response["msg"] = "Post shared successfully";
		}
		else
		{
			$response["rc"] = FALSE;
			$response["msg"] = "Error while sharing post";
		}
		return $response;	
	}

	function delete_image($id)
	{
		$images_files = FCPATH.'uploads/post/'.$id;
        $this->recursiveRemoveDirectory($images_files);

		$array["img"] = "";
		$result = $this->db->update("posts", $array, array('id'=> $id ));

		if($result)
		{
			$response["rc"] = TRUE;
			$response["msg"] = "Image deleted successfully";
		}
		else
		{
			$response["rc"] = FALSE;
			$response["msg"] = "Error while deleting image";
		}

		return $response;

	}

	function recursiveRemoveDirectory($images_files) 
	{
    	foreach (glob("{$images_files}/*") as $file) {

    		if (is_dir($file)) {
    			$this->recursiveRemoveDirectory($file);
    		} else {
    			unlink($file);
    		}
    	}

    	rmdir($images_files);
    }

	function update_comment_answer($comment_id ,$post_id)
	{
		$result1 = $this->db->update("post_has_comments", array('is_answer'=>'0'), array('post_id'=> $post_id));
		$result2 = $this->db->update("post_has_comments", array('is_answer'=> '1'), array('post_id'=> $post_id ,'id'=> $comment_id));
	
		return $result2;
	}

	function add_view_post_by_id($post_id)
	{
		$array["viewed_by"] = $this->session->userdata("user_id") ? $this->session->userdata("user_id") : 0;
		$array["viewed_on"] = time();
		$array["post_id"] = $post_id;

		$result = $this->db->insert("post_has_views",$array);

		if($result)
		{
			return TRUE;
		}
		else
		{
			return FALSE;
		}

	}
	function get_share_count_by_post_id($post_id)
	{
		$shares = $this->db->get_where("post_has_shares", array("post_id" => $post_id))->result_array();
		if(!empty($shares))
		{
			$response['data'] = count($shares);			
		}
		else
		{
			$response['data'] ="";
		}

		return $response;
	}
}
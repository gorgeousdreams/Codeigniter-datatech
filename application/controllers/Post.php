<?php
/* 
 * Generated by CRUDigniter v1.0 Beta
 * www.crudigniter.com
 */
 
class Post extends BaseController
{
    function __construct()
    {
        parent::__construct();

        $this->load->model('Post_model');
        $this->load->model('Category_model');
        $this->load->model('Topic_model');
    }
    
    /*
     * Listing of posts
     */
    function index()
    {
        $url = "";
        $data['posts'] = $this->Post_model->get_all_posts($url);
        $data['header'] =	TRUE;
        $data['_view'] =	'post/listing';
        $data['footer'] =	TRUE;
        $this->load->view('layout/baseTemplate',$data);
    }
    
    /*
     * Adding new posts
     */
    function add()
    {   
        $this->authentication();
        
        $this->form_validation->set_rules('title','Title','required|is_unique[posts.title]|xss_clean');        
        $this->form_validation->set_rules('content','Content','required');        
        $this->form_validation->set_rules('category','Category','required');        
     
        if($this->form_validation->run())
        {   
        	$user_id = $this->session->userdata("user_id");
        	$title = trim($this->input->post("title"));
        	$url = clean($title);
        	$topics =	$this->input->post("topics");
        	$category_id =	$this->input->post("category");
        	$tag =	$this->input->post("tag");
        	$image = $_FILES['image'];

            $params = array(
				'title' => $title,
				'topic'=>$topics,
				'category_id'=>$category_id,
				'tag'=>$tag,
				'url' => $url,
				'image'	=>$image, 
				'created_by' => $this->session->userdata("user_id"),
				'type' => $this->input->post('type'),
				'content' => $this->input->post('content'),
				'created_on' => time(),
            );
            
            $response = $this->Post_model->add_post($params);
            if($response["rc"])
            {
                $this->session->set_flashdata("success",$response["msg"]);
                redirect('post/'.$url);
            }       
        }
        else
        {   
            if($this->input->post("category") && $this->input->post("category") != "")
            {
                $data["topics"] = $this->Topic_model->get_topics_by_category_id($this->input->post("category"));
            }
        	$data["categories"]	=	$this->Category_model->get_all_categories();
        	$data["tags"]	=	$this->Post_model->get_all_tags();
        	$data["header"]	=	TRUE;
        	$data["_view"]	=	"post/add";
        	$data["footer"]	=	TRUE;
            $this->load->view('layout/baseTemplate',$data);
        }
    }
    
    /*
     * Editing posts
     */
    function edit($id)
    {   
        if(!is_valid_post_by_id($id))
        {
            show_error("Invalid Post");
            exit;
        }
        $user_id = $this->session->userdata("user_id");
        $is_valid_post_creater = $this->Post_model->does_post_belong_to_user($user_id, $id);
        
        if($is_valid_post_creater['rc'] == FALSE )
        {
            $this->session->set_flashdata("error",$is_valid_post_creater["msg"]);
            redirect('post/edit'.$id);
            exit;
        }

        $this->load->library('form_validation');         
        $this->form_validation->set_rules('title','Title','required');        
        $this->form_validation->set_rules('content','Content','required');        
        $this->form_validation->set_rules('category','Category','required'); 
                
        if($this->form_validation->run())
        {   
            $title = trim($this->input->post("title"));
            $url = clean($title);

            $params = array(
				'title' => $this->input->post('title'),
				'url' => $url,
				'type' => $this->input->post('type'),
                'topic' => $this->input->post("topics"),
                'tag' => $this->input->post("tag"),
				'content' => $this->input->post('content'),
                'category_id' => $this->input->post('category'),
				'image' => $_FILES['image'],
				'updated_on' => time(),
            );
            
            $response = $this->Post_model->update_posts($id,$params);
            if($response["rc"])
            {
                $this->session->set_flashdata("success",$response["msg"]);
                redirect('post/'.$url);
            } 
            else
            {
                $this->session->set_flashdata("error",$response["msg"]);
                redirect('post/'.$url);
            } 
        }
        else
        {   
            $post = $this->Post_model->get_post_by_id($id);
            $data['post'] = $post['data'];
            $data["categories"] =   $this->Category_model->get_all_categories();
            $data["post_tags"] =   $this->Post_model->get_tags_by_post_id($id);
            $data["topics"] =   $this->Topic_model->get_topics_by_category_id($post['data']['category_id']);
            $data["tags"]   =   $this->Post_model->get_all_tags();
            $data["header"] =   TRUE;
            $data["_view"]  =   "post/edit";
            $data["footer"] =   TRUE;
            $this->load->view('layout/baseTemplate',$data);
        }
    }
    
    function post_belongs_to_topic()
    {
        $category_id = 0;
        $topic_id = 0;

        if($this->input->get("category_id"))
        {
            $category_id = $this->input->get("category_id");
        }
        if($this->input->get("topic_id"))
        {
            $topic_id = $this->input->get("topic_id");
        }

        if( ( ($category_id != 0 && $topic_id ==0) || $category_id != 0 && !is_valid_category($category_id)) || ($topic_id != 0 && !is_valid_topic($topic_id)) )
        {
            $this->session->set_flashdata("error","Invalid parameters");
            redirect("categories");exit;
        }

        $data["category_id"] = $category_id;
		$data["topic_id"] = $topic_id;
		$data["posts"] = $this->Post_model->get_all_posts($topic_id);
		$data["header"] = true;
		$data["_view"] = "post/post_by_topic";
		$data["footer"] = true;
		$this->load->view("layout/baseTemplate",$data);
    }

    function post_by_url($post_url = "" )	
    {

        if(!is_valid_post($post_url))
        {
            $this->session->set_flashdata("error","Invalid post title.");
            redirect("posts");exit;
        }

        if($this->input->post())
        { 
            $this->form_validation->set_rules("comment","Comment","xss_clean|required");

            if($this->form_validation->run())
            {

                $array["post_id"] = $this->input->post("post_id");
                $array["comment"] = $this->input->post("comment");
                $array["commented_by"] = $this->session->userdata("user_id");
                $array["created_on"] = time();
                $add_comment = $this->Post_model->add_post_comment($array);
                
                if($add_comment)
                {
                    redirect("post/".$post_url);
                }
            }
        }

/* because of routing conditions, taking first parameter as post URL */

		$data["posts"] = $this->Post_model->get_post_by_url($post_url);
        $data["share_count"] = $this->Post_model->get_share_count_by_post_id($data['posts']['data']['id']);
        
		$data["header"] = true;
		$data["_view"] = "post/post_by_url";
		$data["footer"] = true;
		$this->load->view("layout/baseTemplate",$data);

    }

    function vote_post_by_id($post_id = 0)
    {
        if($post_id != 0)
        $array["post_id"] = $post_id;
        $array["user_id"] = $this->session->userdata("user_id");
        $array["vote"] = $this->input->get("vote");
        
        if(!$this->input->get("vote"))
        {
            redirect($_SERVER["HTTP_REFERER"]);
        }

        $vote = $this->Post_model->add_vote_to_post_by_id($array);
        
        if($vote["rc"])
        {
            $response["success"] = true;
            $response["data"] = $vote["data"];
        }
        else
        {
            $response["success"] = false;
            $response["data"] = "";
        }
        echo json_encode($response);
    }
    /*
     * Deleting posts
     */
    function remove($id)
    {
        $this->Post_model->delete_posts($id);
        redirect('post/index');
    }

    function share()
    {
        if($this->input->is_ajax_request())
        {
            if($this->input->post("type") == 'facebook' || $this->input->post("type") == 'twitter')
            {
                $params = array(
                                    "user_id" => $this->session->userdata("user_id"),
                                    "post_id" => $this->input->post("post_id"),
                                    "platform" => $this->input->post("type"),
                                    "shared_on" => time()
                                );
                $response = $this->Post_model->add_post_share($params);
                
                if($response["rc"])
                {
                    $response["success"] = TRUE;
                }
                else
                {
                    $response["success"] = FALSE;
                }
                echo json_encode($response);   
            }
        }
    }
    function delete_image($id)
    {
        if(!is_valid_post_by_id($id))
        {
            show_error("Invalid Post");
            exit;
        }
        $result = $this->Post_model->delete_image($id);
        if($result)
        {
            $this->session->set_flashdata("success",$response["msg"]); 
        }
        else
        {
            $this->session->set_flashdata("error",$response["msg"]);            
        
        }
        redirect('post/edit/'.$id);
    }

    function ajax_add_comment()
    {
        
        $user_id = $this->input->post('user_id');
        $comment = $this->input->post('comment');
        $post_id = $this->input->post('post_id');

        $comments_data = array(
            'commented_by' => $user_id,
            'comment' => strip_tags($comment),
            'post_id' => $post_id,
            'created_on' => time()
            );
        $comment_id = $this->Post_model->add_post_comment($comments_data);

        $user = $this->User_model->get_user_by_user_id($user_id);
        $display_data = array(
            'comment' => $comment,
            'user' => $user['data']['name'],
            "created_on"=>ago(time()),
            'comment_id' =>$comment_id
            );
        echo json_encode($display_data);
    }

    function update_comment_answer()
    {
        $comment_id = $this->input->post('comment_id');
        $post_id = $this->input->post('post_id'); 
        $result = $this->Post_model->update_comment_answer($comment_id, $post_id);
        echo json_encode($result);
    }
}